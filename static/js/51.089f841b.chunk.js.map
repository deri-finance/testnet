{"version":3,"sources":["../../src/index.ts"],"names":["AbstractConnector","supportedChainIds","emitUpdate","console","ConnectorEvent","emitError","emitDeactivate","URI_AVAILABLE","UserRejectedRequestError","getSupportedChains","rpc","Object","k","Number","WalletConnectConnector","config","handleChainChanged","this","chainId","handleAccountsChanged","account","accounts","handleDisconnect","error","provider","connected","walletConnectProvider","m","WalletConnectProvider","e","deactivate"],"mappings":"gLAGsBA,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEZ,oB,oHALJ,WAcYC,YAENC,yBAAyBC,IAAzBD,2B,KAEF,KAAUC,IAAV,SAlBJ,E,EAAA,UAqBYC,YAENF,yBAAyBC,IAAzBD,0B,KAEF,KAAUC,IAAV,QAzBJ,E,EAAA,eA4BYE,WAENH,yBAAyBC,IAAzBD,gB,KAEF,KAAUC,IAAV,WAhCJ,E,EAAA,gB,skDACaG,EAAgB,gBAMhBC,EAAb,YACE,a,aACE,sBACA,KAAY,cAAZ,KACA,2C,CACD,CALH,2BAQA,SAASC,EAAmB,G,IAAER,sBAAmBS,QAC/C,WAIOA,EAAMC,OAAA,aAAqB,SAAAC,GAAC,OAAIC,OAAJ,EAAzB,SAAV,EACD,C,IAEYC,EAAb,YAKE,c,aACE,cAAM,CAAEb,kBAAmBQ,EAAmBM,MAA9C,MAEA,SAEA,qBAA0B,4BAA1B,IACA,wBAA6B,+BAA7B,IACA,mBAAwB,0BAAxB,I,CACD,CAbH,qDAeUC,YAEJb,4DAEFc,KAAA,WAAgB,CAAEC,WAnBtB,0BAsBUC,YAEJhB,+DAEFc,KAAA,WAAgB,CAAEG,QAASC,EAAS,IA1BxC,qBA6BUC,WAEJnB,2CAEFc,KAAA,iBAEIA,KAAJ,wBACEA,KAAA,6BACAA,KAAA,oDAA0DA,KAA1D,oBACAA,KAAA,uDAA6DA,KAA7D,uBACAA,KAAA,8BAGFA,KAAA,gBA1CJ,4B,MA8CSA,K,iDAaiB,uCAEd,mBAAgCI,EAAhC,EAFc,WAGb,YAEL,yBAAIE,UACF,MAAM,IAAN,EAGF,OATkB,oBAAhBH,GAgBN,OAJA,wCAA4C,EAA5C,kBACA,0CAA8C,EAA9C,oBACA,6CAAiD,EAAjD,uBAEO,CAAEI,SAAU,EAAZ,sBAAwCJ,U,yBAvB1C,2BAA8BK,U,uBAC3B,yCAA4C,CAChDP,QAAS,qBAA0B,2BAA1B,EAA8D,oBAA9D,GAA0F,KAD/F,iBAGN,SAAyB,2BAAzB,I,wDAVG,EAAKQ,sB,uBAC4B,2EAA4C,SAAAC,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,GAA7C,oBAA9BC,GACN,wBAA6B,IAAIA,EAAsB,EAAvD,O,sDAhDN,OAAAC,GAAA,sBAAAA,EAAA,gCA+EI,uBAAOZ,KAAP,sBA/EJ,OAAAY,GAAA,sBAAAA,EAAA,+BAmFI,uBAAOZ,KAAA,2BAAP,eAnFJ,OAAAY,GAAA,sBAAAA,EAAA,+BAuFI,uBAAOZ,KAAA,iDAAqD,mBAAgCI,EAAhC,EAA5D,IAvFJ,OAAAQ,GAAA,sBAAAA,EAAA,gBA0FSC,WACDb,KAAJ,wBACEA,KAAA,6BACAA,KAAA,kDAAwDA,KAAxD,kBACAA,KAAA,oDAA0DA,KAA1D,oBACAA,KAAA,uDAA6DA,KAA7D,uBA/FN,yB,6BAoGeS,O,EAALT,KAAKS,8BAAL,+BApGV,OAAAG,GAAA,sBAAAA,EAAA,U","file":"static/js/51.089f841b.chunk.js","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { IWalletConnectProviderOptions } from '@walletconnect/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWalletConnectProviderOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  private readonly config: WalletConnectConnectorArguments\n\n  public walletConnectProvider?: any\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    this.emitDeactivate()\n    // we have to do this because of a @walletconnect/web3-provider bug\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider = undefined\n    }\n\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/web3-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\n    if (!this.walletConnectProvider.wc.connected) {\n      await this.walletConnectProvider.wc.createSession({\n        chainId: this.supportedChainIds && this.supportedChainIds.length > 0 ? this.supportedChainIds[0] : 1\n      })\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.wc.uri)\n    }\n\n    const account = await this.walletConnectProvider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        // TODO ideally this would be a better check\n        if (error.message === 'User closed modal') {\n          throw new UserRejectedRequestError()\n        }\n\n        throw error\n      })\n\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.walletConnectProvider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.walletConnectProvider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n    }\n  }\n\n  public async close() {\n    await this.walletConnectProvider?.close()\n  }\n}\n"],"sourceRoot":""}