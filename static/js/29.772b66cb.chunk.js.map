{"version":3,"sources":["hooks/useContract.ts","pages/AirDrop/img/time.svg","pages/AirDrop/img/pToken.svg","pages/AirDrop/AirDrop.js"],"names":["r","contractdescribers","useContract","name","wallet","useWallet","getContract","address","abi","ethereum","useMemo","provider","Web3Provider","Contract","account","getSigner","connectUnchecked","getProviderOrSigner","require","keys","forEach","key","path","split","last","length","substring","indexOf","BigNumber","ethers","utils","inject","observer","lang","type","balance","setBalance","useState","disabled","setDisabled","alert","useAlert","info","setInfo","isWhite","setIsWhite","isPToken","setIsPToken","isExist","setIsExist","contract","transactionTitle","processing","success","error","transactionContent","getBalance","async","isConnected","eqInNumber","detail","chainId","balances","whitelist","useEffect","Date","getTime","className","formatAddress","src","timeLogo","alt","Button","fontWeight","label","width","height","fontSize","onClick","res","claimPToken","console","log","data","message","hash","Emitter","emit","EVENT_TRANS_BEGIN","title","content","receipt","wait","transactionHash","status","EVENT_TRANS_END","context"],"mappings":"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","file":"static/js/29.772b66cb.chunk.js","sourcesContent":["import {Contract,ContractInterface} from '@ethersproject/contracts'\nimport {JsonRpcProvider,JsonRpcSigner,Web3Provider} from '@ethersproject/providers'\nimport { useMemo } from 'react'\nimport { useWallet } from 'use-wallet'\n\nconst contractdescribers = {}\n\nfunction importAll(r){\n  return r.keys().forEach(key => {\n    const path = key.split('/')\n    const last = path[path.length -1]\n    contractdescribers[last.substring(0,last.indexOf('.'))] = r(key)\n  });\n}\n\nimportAll(require.context(`../abis/`,true,/\\.json$/))\n\nexport default function useContract(name : string) : Contract {\n  const wallet = useWallet();\n  const { address ,abi } = getContract(name)\n  const {ethereum } = wallet    \n  return useMemo(() => {\n    if(!address || !abi || !ethereum) return null\n    const provider = new Web3Provider(ethereum,'any')  \n    // provider.on('network',(newNetwork,oldNetwork) => {\n\n    // }) \n    return new Contract(address,abi,getProviderOrSigner(provider,wallet.account))\n  },[address,abi,ethereum]) \n}\n\n// account is not optional\nfunction getSigner(provider: JsonRpcProvider, account: string): JsonRpcSigner {\n  return provider.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nfunction getProviderOrSigner(provider: JsonRpcProvider, account?: string): JsonRpcProvider | JsonRpcSigner {\n  return account ? getSigner(provider, account) : provider\n}\n\nfunction getContract(name : string) : ContractDescriber {\n  return contractdescribers[name]\n}\n\ninterface ContractDescriber {\n  address : string,\n  abi : ContractInterface\n}","export default __webpack_public_path__ + \"static/media/time.0b0bfc0e.svg\";","export default __webpack_public_path__ + \"static/media/pToken.9cfdd57f.svg\";","import { useState, useEffect } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { formatAddress, eqInNumber } from '../../utils/utils'\nimport { useAlert } from 'react-alert'\nimport DeriNumberFormat from '../../utils/DeriNumberFormat'\nimport Button from '../../components/Button/Button'\nimport apiProxy from '../../model/ApiProxy'\nimport timeLogo from './img/time.svg'\nimport tokenLogo from './img/pToken.svg'\nimport './airdrop.less'\nimport useContract from '../../hooks/useContract';\nimport { DERI_TOKEN_ADDRESS, USDC_TOKEN_ADDRESS, EVENT_TRANS_BEGIN, EVENT_TRANS_END } from '../../utils/Constants'\nimport Emitter from '../../utils/Emitter'\nconst { BigNumber, ethers, utils } = require(\"ethers\");\n\nfunction AriDrop({ lang, wallet = {}, type = 'deri' }) {\n  const [balance, setBalance] = useState(0);\n  const [disabled, setDisabled] = useState(true);\n  const alert = useAlert();\n  const [info, setInfo] = useState({})\n  const [isWhite, setIsWhite] = useState(false)\n  const [isPToken, setIsPToken] = useState(true)\n  const [isExist, setIsExist] = useState(false)\n  const contract = useContract('airDrop')\n  const balanceContract = useContract(\"ERC20USDC\")\n  const transactionTitle = {\n    processing: \"Claim Processing\",\n    success: \"Claim Reward Executed\",\n    error: \"Claim Reward Failed\",\n  }\n  const transactionContent = {\n    success: \"Claim Reward\",\n    error: \"Transaction Failed\"\n  }\n\n  const getBalance = async () => {\n    if (wallet.isConnected() && contract && eqInNumber(wallet.detail.chainId, 42161)) {\n      const balances = await contract.whitelist( wallet.detail.account);\n      if (balances) {\n        setIsExist(true)\n      } else {\n        setIsExist(false)\n      }\n    }\n  }\n\n  const getWalletBalance = async () => {\n    if (+wallet.detail.chainId === 42161 && balanceContract) {\n      let balance = await balanceContract.balanceOf(wallet.detail.account)\n      let decimals = await balanceContract.decimals()\n      balance = BigNumber.from(balance._hex).toString() / (10 ** decimals)\n      setBalance(balance)\n    }\n  }\n  const click = async () => {\n    if (wallet.isConnected() && contract && wallet.detail.chainId === 42161) {\n      let res;\n      try {\n        res = await contract.claimPToken()\n      } catch (error) {\n        console.log(error)\n        if (error.error && error.error.data && error.error.data.message) {\n          let message = error.error.data.message\n          alert.error(message)\n        }\n        return false;\n      }\n      if (res && res.hash) {\n        Emitter.emit(EVENT_TRANS_BEGIN, {\n          title: transactionTitle, content: transactionContent, hash: res.hash\n        })\n      } else {\n        return false\n      }\n      const receipt = await res.wait()\n      console.log(\"receipt\", receipt)\n      if (receipt) {\n        console.log(\"receipt\", receipt)\n        if (receipt && receipt.transactionHash) {\n          const hash = receipt.transactionHash\n          if (receipt.status) {\n            getBalance()\n            // getWalletBalance()\n            setDisabled(true)\n            Emitter.emit(EVENT_TRANS_END, { title: transactionTitle, content: transactionContent, context: { success: true, hash: hash, error: \"error\" } })\n          } else {\n            Emitter.emit(EVENT_TRANS_END, { title: transactionTitle, content: transactionContent, context: { success: false.success, hash: hash, error: \"error\" } })\n          }\n\n        }\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (wallet.isConnected()) {\n      getBalance()\n      // getWalletBalance()\n    }\n\n  }, [wallet.chainId, wallet.account])\n\n  useEffect(() => {\n    if (isExist) {\n      let timestamp = new Date()\n      if (timestamp.getTime() >= 1668765600000) {\n        setDisabled(true)\n      } else {\n        setDisabled(false)\n      }\n    } else {\n      setDisabled(true)\n    }\n  }, [isExist])\n\n\n  return (\n    <div className='airdrop-box'>\n      <div className='airdrop-info'>\n        <div className='airdrop-info-box'>\n          <div className='airdrop-title'>\n            {/* {lang['title']} */}\n            $1000 Giveaway for FTT Holders\n          </div>\n          <div className='wallet-address'>\n            <span className='blue-logo'></span>\n            {formatAddress(wallet.detail.account)}\n          </div>\n          {/* <div className='wallet-balance'>\n            {lang['wallet-balance']} : <DeriNumberFormat value={balance} decimalScale={2} thousandSeparator={true} /> USDC\n          </div> */}\n          {/* {type === 'pToken' && <div className='airdrop-time position-text'>\n            <div className='time-logo'>\n              <img src={tokenLogo} alt='' />\n            </div>\n            <div className='time-text'>\n              <div className='time-title'>\n                <div>\n                  Get free mBTC^2 perpetual\n                </div>\n                <div>\n                  powers position\n                </div>\n              </div>\n            </div>\n          </div>} */}\n          {type === 'usdc' && <div className='airdrop-time position'>\n            <div className='time-logo'>\n              <img src={timeLogo} alt='' />\n            </div>\n            <div className='time-text'>\n              <div className='time-title'>\n                <div>\n                  {lang['start-time']}\n                </div>\n                <div>\n                  {lang['expire-time']}\n                </div>\n              </div>\n              <div>\n                <div>\n                  2022-11-09 10:00:00 UTC\n                </div>\n                <div>\n                  2022-11-18 10:00:00 UTC\n                </div>\n              </div>\n            </div>\n          </div>}\n          {type === 'deri' && <div className='airdrop-time'>\n            <div className='time-logo'>\n              <img src={timeLogo} alt='' />\n            </div>\n            <div className='time-text'>\n              <div className='time-title'>\n                <div>\n                  {lang['start-time']}\n                </div>\n                <div>\n                  {lang['expire-time']}\n                </div>\n              </div>\n              <div>\n                <div>\n                  2022-03-09 10:00:00 UTC\n                </div>\n                <div>\n                  2022-03-11 12:00:00 UTC\n                </div>\n              </div>\n            </div>\n          </div>}\n\n          <div className='claim'>\n            <Button fontWeight='bold' disabled={disabled} label={lang['claim']} width='277' height='72' fontSize='32' onClick={click} />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default inject('wallet', 'poolManager')(observer(AriDrop))"],"sourceRoot":""}