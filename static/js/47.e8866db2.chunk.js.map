{"version":3,"sources":["../../src/index.ts"],"names":["AbstractConnector","supportedChainIds","emitUpdate","console","ConnectorEvent","emitError","emitDeactivate","chainIdToNetwork","FortmaticConnector","apiKey","chainId","Object","accounts","account","provider","this","fortmatic","m","Fortmatic","e","deactivate"],"mappings":"gLAGsBA,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEZ,oB,oHALJ,WAcYC,YAENC,yBAAyBC,IAAzBD,2B,KAEF,KAAUC,IAAV,SAlBJ,E,EAAA,UAqBYC,YAENF,yBAAyBC,IAAzBD,0B,KAEF,KAAUC,IAAV,QAzBJ,E,EAAA,eA4BYE,WAENH,yBAAyBC,IAAzBD,gB,KAEF,KAAUC,IAAV,WAhCJ,E,EAAA,gB,oHACA,IAAMG,EAAkD,CACtD,EADsD,UAEtD,EAFsD,UAGtD,EAHsD,UAItD,GAAI,SAQOC,EAAb,Y,QAME,c,MAAcC,WAAQC,Y,OACVC,wBAAuCD,EAAjD,0BAAU,EAAD,uBAAT,IACA,cAAM,CAAET,kBAAmB,CAACS,MAA5B,MAEA,SACA,Y,CACD,C,EAZH,G,EAAA,G,6EAAA,mD,wCAuB0B,yCAGd,mBAAgCE,EAAhC,EAHc,oBAAhBC,GAKN,MAAO,CAAEC,SAAU,YAAZ,cAA0CJ,QAAS,EAAnD,QAAiEG,U,OAbnEE,K,iBAAA,EAAKC,U,uBACgB,0CAAyB,SAAAC,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,GAA1B,oBAAlBC,GACN,YAAiB,IAAIA,EACnB,EADe,OAEf,mBAAsB,eAAtB,EAAuDX,EAAiB,EAF1E,S,sDAjBN,OAAAY,GAAA,sBAAAA,EAAA,gCAgCI,OAAO,QAAP,QAAOJ,KAAA,UAAP,cAhCJ,OAAAI,GAAA,sBAAAA,EAAA,+BAoCI,OAAO,QAAP,QAAOJ,KAAP,QApCJ,OAAAI,GAAA,sBAAAA,EAAA,+BAwCI,OAAO,QAAP,QAAOJ,KAAA,mDAGC,mBAAgCH,EAAhC,EAHR,IAxCJ,OAAAO,GAAA,sBAAAA,EAAA,gBA8CSC,WA9CT,yB,MAiDUL,K,uBAAA,4CACN,kB,GAlDJ,OAAAI,GAAA,sBAAAA,EAAA,U","file":"static/js/47.e8866db2.chunk.js","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\ninterface FortmaticConnectorArguments {\n  apiKey: string\n  chainId: number\n}\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string\n  private readonly chainId: number\n\n  public fortmatic: any\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\n    super({ supportedChainIds: [chainId] })\n\n    this.apiKey = apiKey\n    this.chainId = chainId\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.fortmatic) {\n      const Fortmatic = await import('fortmatic').then(m => m?.default ?? m)\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const account = await this.fortmatic\n      .getProvider()\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {}\n\n  public async close() {\n    await this.fortmatic.user.logout()\n    this.emitDeactivate()\n  }\n}\n"],"sourceRoot":""}