{"version":3,"sources":["pages/Faucet/Faucet.js"],"names":["inject","observer","wallet","lang","tonkenList","token","arbiList","alert","useAlert","showList","setShowList","useState","check","setCheck","useEffect","className","onClick","rel","target","href","map","item","index","width","height","fontWeight","label","async","isConnected","detail","chainId","param","account","res","apiProxy","request","includeResponse","success","error","mint"],"mappings":"2IAAA,6EAqKeA,sBAAO,SAAPA,CAAiBC,aA9JhC,YAAmC,IAAnB,OAAEC,EAAF,KAAUC,GAAQ,EAChC,MAAMC,EAAa,CACjB,CACEC,MAAO,QAET,CACEA,MAAO,OAET,CACEA,MAAO,OAET,CACEA,MAAO,OAET,CACEA,MAAO,OAET,CACEA,MAAO,QAET,CACEA,MAAO,OAET,CACEA,MAAO,QAET,CACEA,MAAO,SAET,CACEA,MAAO,QAET,CACEA,MAAO,QAET,CACEA,MAAO,OAET,CACEA,MAAO,QAET,CACEA,MAAO,QAET,CACEA,MAAO,OAET,CACEA,MAAO,QAET,CACEA,MAAO,SAGLC,EAAW,CACf,CACED,MAAO,QAKT,CACEA,MAAO,QAET,CACEA,MAAO,OAET,CACEA,MAAO,QAET,CACEA,MAAO,SAGLE,EAAQC,eACPC,EAAUC,GAAeC,mBAASP,IAClCQ,EAAOC,GAAYF,mBAAS,OAiCnC,OAPAG,qBAAU,KAENJ,EADY,QAAVE,EACUR,EAEAE,EACb,GACA,CAACM,IAEF,qBAAKG,UAAU,iBAAf,SACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,eAAf,SACGZ,EAAK,0BAER,sBAAKY,UAAU,MAAf,UACE,qBAAKA,UAAqB,QAAVH,EAAkB,gBAAkB,UAAWI,QAAS,IAAMH,EAAS,OAAvF,iBACA,qBAAKE,UAAqB,aAAVH,EAAuB,qBAAuB,eAAgBI,QAAS,IAAMH,EAAS,YAAtG,yBAEF,sBAAKE,UAAU,WAAf,UACE,8BACa,QAAVH,EAAkBT,EAAK,iBAAmBA,EAAK,mBAEvC,QAAVS,GAAmB,qBAAKG,UAAU,aAAf,SAClB,mBAAGE,IAAI,aAAaC,OAAO,SAASC,KAAK,2CAAzC,mBAIS,aAAVP,GAAwB,qBAAKG,UAAU,aAAf,SACvB,mBAAGE,IAAI,aAAaC,OAAO,SAASC,KAAK,6BAAzC,sBAMJ,qBAAKJ,UAAU,aAAf,SACGN,EAASW,KAAI,CAACC,EAAMC,IAEjB,sBAAKP,UAAU,iBAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAAC,IAAD,CAAMV,MAAOgB,EAAKhB,MAAOkB,MAAO,GAAIC,OAAQ,OAE9C,qBAAKT,UAAU,aAAf,SACGM,EAAKhB,QAER,qBAAKU,UAAU,eAAf,SACE,cAAC,IAAD,CAAQU,WAAY,IAAKC,MAAOvB,EAAI,KAAUoB,MAAO,GAAIC,OAAQ,GAAIR,QAAS,IArEjFW,WACX,GAAIzB,EAAO0B,eACT,GAAc,QAAVhB,GAA8C,MAA1BV,EAAO2B,OAAOC,QAAgB,CACpD,IAAIC,EAAQ,CAAC7B,EAAO2B,OAAOC,QAAS5B,EAAO2B,OAAOG,QAAS3B,GACvD4B,QAAYC,IAASC,QAAQ,cAAeJ,EAAO,CAAEK,iBAAiB,IACrEH,GAAQA,EAAII,QAGf9B,EAAM8B,QAAQ,gBAFd9B,EAAM+B,MAAM,YAIf,MAAM,GAAc,aAAV1B,IAAoD,UAA1BV,EAAO2B,OAAOC,SAAiD,UAA1B5B,EAAO2B,OAAOC,SAAqB,CAC3G,IAAIC,EAAQ,CAAC7B,EAAO2B,OAAOC,QAAS5B,EAAO2B,OAAOG,QAAS3B,GACvD4B,QAAYC,IAASC,QAAQ,cAAeJ,EAAO,CAAEK,iBAAiB,IACrEH,GAAQA,EAAII,QAGf9B,EAAM8B,QAAQ,gBAFd9B,EAAM+B,MAAM,YAIf,OAGD/B,EAAM+B,MAAM,wBACb,EA+CiGC,CAAKlB,EAAKhB,aAR7DiB,WAmBlD,I","file":"static/js/37.5bd5f965.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport Icon from '../../components/Icon/Icon'\r\nimport Button from '../../components/Button/Button'\r\nimport apiProxy from '../../model/ApiProxy'\r\nimport { useAlert } from 'react-alert'\r\nimport './faucet.less'\r\nimport { inject, observer } from 'mobx-react'\r\nfunction Faucet({ wallet, lang }) {\r\n  const tonkenList = [\r\n    {\r\n      token: 'BUSD'\r\n    },\r\n    {\r\n      token: 'SXP'\r\n    },\r\n    {\r\n      token: 'ETH'\r\n    },\r\n    {\r\n      token: 'LTC'\r\n    },\r\n    {\r\n      token: 'XRP'\r\n    },\r\n    {\r\n      token: 'BTCB'\r\n    },\r\n    {\r\n      token: 'ADA'\r\n    },\r\n    {\r\n      token: 'CAKE'\r\n    },\r\n    {\r\n      token: 'MATIC'\r\n    },\r\n    {\r\n      token: 'AAVE'\r\n    },\r\n    {\r\n      token: 'TUSD'\r\n    },\r\n    {\r\n      token: 'TRX'\r\n    },\r\n    {\r\n      token: 'USDT'\r\n    },\r\n    {\r\n      token: 'USDC'\r\n    },\r\n    {\r\n      token: 'UST'\r\n    },\r\n    {\r\n      token: 'LUNA'\r\n    },\r\n    {\r\n      token: 'DOGE'\r\n    },\r\n  ]\r\n  const arbiList = [\r\n    {\r\n      token: \"USDC\"\r\n    },\r\n    // {\r\n    //   token: \"USDT\"\r\n    // },\r\n    {\r\n      token: \"LINK\"\r\n    },\r\n    {\r\n      token: \"DAI\"\r\n    },\r\n    {\r\n      token: \"AAVE\"\r\n    },\r\n    {\r\n      token: \"WBTC\"\r\n    },\r\n  ]\r\n  const alert = useAlert();\r\n  const [showList, setShowList] = useState(tonkenList)\r\n  const [check, setCheck] = useState(\"BSC\")\r\n  const mint = async (token) => {\r\n    if (wallet.isConnected()) {\r\n      if (check === 'BSC' && +wallet.detail.chainId === 97) {\r\n        let param = [wallet.detail.chainId, wallet.detail.account, token]\r\n        let res = await apiProxy.request('mintTokenV3', param, { includeResponse: true })\r\n        if (!res || !res.success) {\r\n          alert.error('mint fail')\r\n        } else {\r\n          alert.success('mint success')\r\n        }\r\n      } else if (check === 'ARBITRUM' && (+wallet.detail.chainId === 421611 || +wallet.detail.chainId === 421613)) {\r\n        let param = [wallet.detail.chainId, wallet.detail.account, token]\r\n        let res = await apiProxy.request('mintTokenV3', param, { includeResponse: true })\r\n        if (!res || !res.success) {\r\n          alert.error('mint fail')\r\n        } else {\r\n          alert.success('mint success')\r\n        }\r\n      }\r\n\r\n    } else {\r\n      alert.error('Please connect wallet')\r\n    }\r\n\r\n  }\r\n  useEffect(() => {\r\n    if (check === 'BSC') {\r\n      setShowList(tonkenList)\r\n    } else {\r\n      setShowList(arbiList)\r\n    }\r\n  }, [check])\r\n  return (\r\n    <div className='testnet-faucet'>\r\n      <div className='faucet-info'>\r\n        <div className='faucet-title'>\r\n          {lang['obtain-testnet-token']}\r\n        </div>\r\n        <div className='tab'>\r\n          <div className={check === \"BSC\" ? 'tab-bsc check' : 'tab-bsc'} onClick={() => setCheck('BSC')}>BSC</div>\r\n          <div className={check === \"ARBITRUM\" ? 'tab-arbitrum check' : 'tab-arbitrum'} onClick={() => setCheck('ARBITRUM')}>ARBITRUM</div>\r\n        </div>\r\n        <div className='mint-bnb'>\r\n          <div>\r\n            {check === \"BSC\" ? lang['go-to-min-bnb'] : lang['go-to-min-eth']}\r\n          </div>\r\n          {check === 'BSC' && <div className='bnb-button'>\r\n            <a rel='noreferrer' target='_blank' href='https://testnet.binance.org/faucet-smart'>\r\n              BNB\r\n            </a>\r\n          </div>}\r\n          {check === 'ARBITRUM' && <div className='bnb-button'>\r\n            <a rel='noreferrer' target='_blank' href='https://rinkebyfaucet.com/'>\r\n              ETH\r\n            </a>\r\n          </div>}\r\n\r\n        </div>\r\n        <div className='mint-token'>\r\n          {showList.map((item, index) => {\r\n            return (\r\n              <div className='mint-token-box' key={index}>\r\n                <div className='token-logo'>\r\n                  <Icon token={item.token} width={60} height={60} />\r\n                </div>\r\n                <div className='token-name'>\r\n                  {item.token}\r\n                </div>\r\n                <div className='token-button'>\r\n                  <Button fontWeight={300} label={lang['mint']} width={88} height={31} onClick={() => mint(item.token)} />\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\nexport default inject('wallet')(observer(Faucet))"],"sourceRoot":""}