{"version":3,"sources":["hooks/useContract.ts","pages/AirDrop/img/time.svg","pages/AirDrop/img/pToken.svg","pages/AirDrop/AirDrop.js"],"names":["r","contractdescribers","useContract","name","wallet","useWallet","getContract","address","abi","ethereum","useMemo","provider","Web3Provider","Contract","account","getSigner","connectUnchecked","getProviderOrSigner","require","keys","forEach","key","path","split","last","length","substring","indexOf","BigNumber","ethers","utils","inject","observer","lang","type","useState","disabled","setDisabled","alert","useAlert","isExist","setIsExist","contract","transactionTitle","processing","success","error","transactionContent","getBalance","a","isConnected","eqInNumber","detail","chainId","whitelist","balances","click","claimPToken","res","console","log","data","message","hash","Emitter","emit","EVENT_TRANS_BEGIN","title","content","wait","receipt","transactionHash","status","EVENT_TRANS_END","context","useEffect","Date","getTime","className","formatAddress","src","timeLogo","alt","Button","fontWeight","label","width","height","fontSize","onClick"],"mappings":"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","file":"static/js/29.a544a380.chunk.js","sourcesContent":["import {Contract,ContractInterface} from '@ethersproject/contracts'\r\nimport {JsonRpcProvider,JsonRpcSigner,Web3Provider} from '@ethersproject/providers'\r\nimport { useMemo } from 'react'\r\nimport { useWallet } from 'use-wallet'\r\n\r\nconst contractdescribers = {}\r\n\r\nfunction importAll(r){\r\n  return r.keys().forEach(key => {\r\n    const path = key.split('/')\r\n    const last = path[path.length -1]\r\n    contractdescribers[last.substring(0,last.indexOf('.'))] = r(key)\r\n  });\r\n}\r\n\r\nimportAll(require.context(`../abis/`,true,/\\.json$/))\r\n\r\nexport default function useContract(name : string) : Contract {\r\n  const wallet = useWallet();\r\n  const { address ,abi } = getContract(name)\r\n  const {ethereum } = wallet    \r\n  return useMemo(() => {\r\n    if(!address || !abi || !ethereum) return null\r\n    const provider = new Web3Provider(ethereum,'any')  \r\n    // provider.on('network',(newNetwork,oldNetwork) => {\r\n\r\n    // }) \r\n    return new Contract(address,abi,getProviderOrSigner(provider,wallet.account))\r\n  },[address,abi,ethereum]) \r\n}\r\n\r\n// account is not optional\r\nfunction getSigner(provider: JsonRpcProvider, account: string): JsonRpcSigner {\r\n  return provider.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nfunction getProviderOrSigner(provider: JsonRpcProvider, account?: string): JsonRpcProvider | JsonRpcSigner {\r\n  return account ? getSigner(provider, account) : provider\r\n}\r\n\r\nfunction getContract(name : string) : ContractDescriber {\r\n  return contractdescribers[name]\r\n}\r\n\r\ninterface ContractDescriber {\r\n  address : string,\r\n  abi : ContractInterface\r\n}","export default __webpack_public_path__ + \"static/media/time.77d9d1c0.svg\";","export default __webpack_public_path__ + \"static/media/pToken.f82ededf.svg\";","import { useState, useEffect } from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\nimport { formatAddress, eqInNumber } from '../../utils/utils'\r\nimport { useAlert } from 'react-alert'\r\nimport DeriNumberFormat from '../../utils/DeriNumberFormat'\r\nimport Button from '../../components/Button/Button'\r\nimport apiProxy from '../../model/ApiProxy'\r\nimport timeLogo from './img/time.svg'\r\nimport tokenLogo from './img/pToken.svg'\r\nimport './airdrop.less'\r\nimport useContract from '../../hooks/useContract';\r\nimport { DERI_TOKEN_ADDRESS, USDC_TOKEN_ADDRESS, EVENT_TRANS_BEGIN, EVENT_TRANS_END } from '../../utils/Constants'\r\nimport Emitter from '../../utils/Emitter'\r\nconst { BigNumber, ethers, utils } = require(\"ethers\");\r\n\r\nfunction AriDrop({ lang, wallet = {}, type = 'deri' }) {\r\n  const [balance, setBalance] = useState(0);\r\n  const [disabled, setDisabled] = useState(true);\r\n  const alert = useAlert();\r\n  const [info, setInfo] = useState({})\r\n  const [isWhite, setIsWhite] = useState(false)\r\n  const [isPToken, setIsPToken] = useState(true)\r\n  const [isExist, setIsExist] = useState(false)\r\n  const contract = useContract('airDrop')\r\n  const balanceContract = useContract(\"ERC20USDC\")\r\n  const transactionTitle = {\r\n    processing: \"Claim Processing\",\r\n    success: \"Claim Reward Executed\",\r\n    error: \"Claim Reward Failed\",\r\n  }\r\n  const transactionContent = {\r\n    success: \"Claim Reward\",\r\n    error: \"Transaction Failed\"\r\n  }\r\n\r\n  const getBalance = async () => {\r\n    if (wallet.isConnected() && contract && eqInNumber(wallet.detail.chainId, 42161)) {\r\n      const balances = await contract.whitelist( wallet.detail.account);\r\n      if (balances) {\r\n        setIsExist(true)\r\n      } else {\r\n        setIsExist(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  const getWalletBalance = async () => {\r\n    if (+wallet.detail.chainId === 42161 && balanceContract) {\r\n      let balance = await balanceContract.balanceOf(wallet.detail.account)\r\n      let decimals = await balanceContract.decimals()\r\n      balance = BigNumber.from(balance._hex).toString() / (10 ** decimals)\r\n      setBalance(balance)\r\n    }\r\n  }\r\n  const click = async () => {\r\n    if (wallet.isConnected() && contract && wallet.detail.chainId === 42161) {\r\n      let res;\r\n      try {\r\n        res = await contract.claimPToken()\r\n      } catch (error) {\r\n        console.log(error)\r\n        if (error.error && error.error.data && error.error.data.message) {\r\n          let message = error.error.data.message\r\n          alert.error(message)\r\n        }\r\n        return false;\r\n      }\r\n      if (res && res.hash) {\r\n        Emitter.emit(EVENT_TRANS_BEGIN, {\r\n          title: transactionTitle, content: transactionContent, hash: res.hash\r\n        })\r\n      } else {\r\n        return false\r\n      }\r\n      const receipt = await res.wait()\r\n      console.log(\"receipt\", receipt)\r\n      if (receipt) {\r\n        console.log(\"receipt\", receipt)\r\n        if (receipt && receipt.transactionHash) {\r\n          const hash = receipt.transactionHash\r\n          if (receipt.status) {\r\n            getBalance()\r\n            // getWalletBalance()\r\n            setDisabled(true)\r\n            Emitter.emit(EVENT_TRANS_END, { title: transactionTitle, content: transactionContent, context: { success: true, hash: hash, error: \"error\" } })\r\n          } else {\r\n            Emitter.emit(EVENT_TRANS_END, { title: transactionTitle, content: transactionContent, context: { success: false.success, hash: hash, error: \"error\" } })\r\n          }\r\n\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (wallet.isConnected()) {\r\n      getBalance()\r\n      // getWalletBalance()\r\n    }\r\n\r\n  }, [wallet.chainId, wallet.account])\r\n\r\n  useEffect(() => {\r\n    if (isExist) {\r\n      let timestamp = new Date()\r\n      if (timestamp.getTime() >= 1668765600000) {\r\n        setDisabled(true)\r\n      } else {\r\n        setDisabled(false)\r\n      }\r\n    } else {\r\n      setDisabled(true)\r\n    }\r\n  }, [isExist])\r\n\r\n\r\n  return (\r\n    <div className='airdrop-box'>\r\n      <div className='airdrop-info'>\r\n        <div className='airdrop-info-box'>\r\n          <div className='airdrop-title'>\r\n            {/* {lang['title']} */}\r\n            $1000 Giveaway for FTT Holders\r\n          </div>\r\n          <div className='wallet-address'>\r\n            <span className='blue-logo'></span>\r\n            {formatAddress(wallet.detail.account)}\r\n          </div>\r\n          {/* <div className='wallet-balance'>\r\n            {lang['wallet-balance']} : <DeriNumberFormat value={balance} decimalScale={2} thousandSeparator={true} /> USDC\r\n          </div> */}\r\n          {/* {type === 'pToken' && <div className='airdrop-time position-text'>\r\n            <div className='time-logo'>\r\n              <img src={tokenLogo} alt='' />\r\n            </div>\r\n            <div className='time-text'>\r\n              <div className='time-title'>\r\n                <div>\r\n                  Get free mBTC^2 perpetual\r\n                </div>\r\n                <div>\r\n                  powers position\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>} */}\r\n          {type === 'usdc' && <div className='airdrop-time position'>\r\n            <div className='time-logo'>\r\n              <img src={timeLogo} alt='' />\r\n            </div>\r\n            <div className='time-text'>\r\n              <div className='time-title'>\r\n                <div>\r\n                  {lang['start-time']}\r\n                </div>\r\n                <div>\r\n                  {lang['expire-time']}\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <div>\r\n                  2022-11-09 10:00:00 UTC\r\n                </div>\r\n                <div>\r\n                  2022-11-18 10:00:00 UTC\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>}\r\n          {type === 'deri' && <div className='airdrop-time'>\r\n            <div className='time-logo'>\r\n              <img src={timeLogo} alt='' />\r\n            </div>\r\n            <div className='time-text'>\r\n              <div className='time-title'>\r\n                <div>\r\n                  {lang['start-time']}\r\n                </div>\r\n                <div>\r\n                  {lang['expire-time']}\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <div>\r\n                  2022-03-09 10:00:00 UTC\r\n                </div>\r\n                <div>\r\n                  2022-03-11 12:00:00 UTC\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>}\r\n\r\n          <div className='claim'>\r\n            <Button fontWeight='bold' disabled={disabled} label={lang['claim']} width='277' height='72' fontSize='32' onClick={click} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default inject('wallet', 'poolManager')(observer(AriDrop))"],"sourceRoot":""}